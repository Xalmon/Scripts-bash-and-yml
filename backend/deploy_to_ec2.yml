name: CI/CD Pipeline

on:
  push:
    branches:
      [ 'dev', 'Xalmon-patch-1']

env:
  REPO_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/test-dev
  ECR_REPOSITORY: test-dev
  AWS_REGION: us-east-1
  CLUSTER: test
  SERVICE: test-dev
  EMAILS: ''

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build the application
        run: mvn clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

  deploy:
        runs-on: ubuntu-latest
        needs: build-and-push
        
        steps:
          - name: Checkout code
            uses: actions/checkout@v2
      
          - name: SSH to EC2 and Deploy Docker Container
            env:
              EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
              EC2_USER: ${{ secrets.EC2_USER }}
              EC2_HOST: ${{ secrets.EC2_HOST }}
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            run: |
              echo "$EC2_SSH_KEY" > QA-KP.pem
              chmod 600 QA-KP.pem
            
              ssh -t -o StrictHostKeyChecking=no -i QA-KP.pem $EC2_USER@$EC2_HOST << 'EOF'
                  set -e  # Exit immediately if a command exits with a non-zero status
      
                  echo "SSH connection established!"
      
                  # Authenticate with ECR
                  echo "Authenticating with ECR..."
                  aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
      
                  # Pull the latest Docker image
                  echo "Pulling the latest image..."
                  docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/test-dev:latest
                  
                  # Free port 8080 if it's in use
                  echo "Freeing port 8080 if in use..."
                  sudo fuser -k 8080/tcp || true
                  
                  # Check if the container exists
                  if [ "$(docker ps -aq -f name=test-dev-container)" ]; then
                      echo "Stopping and removing existing container..."
                      docker stop test-dev-container || true
                      docker rm test-dev-container || true
                      echo "Stopped and removed containers."
                  else
                      echo "No existing container found, proceeding to create a new one."
                  fi
      
                  # Run the new container
                  echo "Starting the new container..."
                  docker run -d --name test-dev-container -p 8080:8080 \
                      ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/test-dev:latest
                  echo "Container started successfully!"
              EOF


  send_notification:
    name: Send Email Notification
    needs: [build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
  
    steps:
      - uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          PROJECT_NAME="G-S"
          echo "TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          if [ -n "${{ github.head_ref }}" ]; then
            echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
          else
            echo "BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          fi
          echo "COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an <%ae>')" >> $GITHUB_ENV
          sanitized_commit_message=$(git log -1 --pretty=%B | tr -d '\n' | tr -d '\r')
          echo "COMMIT_MESSAGE=${sanitized_commit_message}" >> $GITHUB_ENV
          commit_message_summary=$(git log -1 --pretty=%s | tr -d '\n' | tr -d '\r')
          CUSTOM_TAG="${PROJECT_NAME}-${BRANCH_NAME}-${commit_message_summary// /_}"
          echo "TAG=${CUSTOM_TAG}" >> $GITHUB_ENV

      - name: Send build success email notification
        if: success()
        env:
          SMTP_SERVER: solomon.africa
          SMTP_PORT: 465
          SMTP_USERNAME: builds@solomon.africa
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        run: |
          echo "Sending success email..."
          chmod +x .github/workflows/scripts/send_success_email.sh
          .github/workflows/scripts/send_success_email.sh \
            "$SMTP_SERVER" \
            "$SMTP_PORT" \
            "$SMTP_USERNAME" \
            "$SMTP_PASSWORD" \
            "${{ env.EMAILS }}" \
            "${{ env.TAG }}" \
            "${{ env.BRANCH_NAME }}" \
            "${{ env.COMMIT_AUTHOR }}" \
            "BUILD_REPORT_URL_SET" \
            "AUTOMATION_TEST_URL_SET" \
            "${{ env.COMMIT_MESSAGE }}"

      - name: Send build failure email notification
        if: failure()
        env:
          SMTP_SERVER: solomon.africa
          SMTP_PORT: 465
          SMTP_USERNAME: builds@solomon.africa
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        run: |
          echo "Sending failure email..."
          chmod +x .github/workflows/scripts/send_failure_email.sh
          .github/workflows/scripts/send_failure_email.sh \
            "$SMTP_SERVER" \
            "$SMTP_PORT" \
            "$SMTP_USERNAME" \
            "$SMTP_PASSWORD" \
            "${{ env.EMAILS }}" \
            "${{ env.TAG }}" \
            "${{ env.BRANCH_NAME }}" \
            "${{ env.COMMIT_AUTHOR }}" \
            "BUILD_REPORT_URL_SET" \
            "AUTOMATION_TEST_URL_SET" \
            "${{ env.COMMIT_MESSAGE }}"
